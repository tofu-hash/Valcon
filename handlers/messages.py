import aiogram.utils.exceptions
from py_currency_converter import convert

import config
from handlers.init import *
import re


async def delete_last_messages(msg: Message, count: int = 3):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∫–æ–º–∞–Ω–¥—ã."""

    for i in range(0, count):
        try:
            await bot.delete_message(chat_id=msg.from_user.id,
                                     message_id=msg.message_id - i)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass


async def start_cmd_handler(msg: Message, state: FSMContext):
    await state.finish()

    answer = ('üí∏ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –≤–∞–ª—é—Ç—É '
              '–ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ—ë')

    await msg.answer_sticker(sticker='CAACAgIAAxkBAAMKZCqF8NxyEdlQYjNX0uQ-kMCKBRsAAvINAAK7fWBIH8H7_ft7nyovBA')
    await msg.answer(text=answer, parse_mode='markdown')


async def converter_msg_handler(msg: Message):
    # –ò—â—É —Ç–æ–ª—å–∫–æ —Å—É–º–º—ã
    # amount_regex = r'(?P<amount>\d+(?:[,.]\d+)?(?:–∫–∫|kk|[kK]|[–∫–ö])?)'
    # matches = re.findall(amount_regex, msg.text.lower())[0]

    # –ò—â—É –ø–∞—Ä—ã —Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    currency_regex = r'(?P<amount>\d+(?:[,.]\d+)?(?:–∫–∫|kk|[kK]|[–∫–ö])?)\s*(?P<currency>' \
                     r'USD|\$|—Ä—É–±?|uah?|rub?|–±–∞—á–µ–π?|–≥—Ä–Ω|–≥—Ä–∏–≤(?:–Ω–∞|–µ–Ω|–µ–Ω—å)?|–±–∞–∫(?:—Å|—Å—ã)?|‚ÇΩ|usd)'
    matches = re.findall(currency_regex, msg.text.lower())

    for match in matches:

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞–ª—é—Ç—ã. –ü–æ–ª—É—á–∞—é —Å—É–º–º—É –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã.
        amount = match[0]

        # –£–º–Ω–æ–∂–∞—é –Ω–∞ –∫/k
        if 'k' in amount or '–∫' in amount:
            amount = float(amount.replace('k', '000').replace('–∫', '000'))
        else:
            amount = float(amount)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—é –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∫ –Ω—É–∂–Ω–æ–º—É –ª–∏–±–µ –≤–∏–¥—É ($=USD, —Ä—É–±–ª—å=RUB)
        currency = match[1]
        currency_code = ''
        for _currency in config.CURRENCIES:
            if currency in config.CURRENCIES[_currency]:
                currency_code = _currency

        if not currency_code:
            currency_code = 'RUB'

        raw_converted = convert(base=currency_code, amount=int(amount),
                                to=config.CURRENCIES.keys())

        # –û–∫—Ä—É–≥–ª—è—é –¥–æ –¥–≤—É—Ö —á–∏—Å–µ–ª –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        converted = {}
        for currency in raw_converted:
            converted[currency] = round(raw_converted[currency], 2)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–≥–ª–∞–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –ø–µ—Ä–≤–∞—è, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø–æ—Ç–æ–º)

        answer = '%s *%s %s*\n\n' % (config.CURRENCIES_FLAGS[currency_code],
                                     converted[currency_code], currency_code)

        currencies = [i for i in config.CURRENCIES]
        currencies.remove(currency_code)

        for _currency in currencies:
            answer += '%s *%s %s*\n' % (config.CURRENCIES_FLAGS[_currency],
                                        converted[_currency], _currency)

        await msg.answer(text=answer, parse_mode='markdown')


async def get_sticker_id_handler(msg: Message):
    await msg.answer_sticker(sticker=msg.sticker.file_id)
    print(msg.sticker.file_id)
