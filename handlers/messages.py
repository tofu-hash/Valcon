import aiogram.utils.exceptions
import re
import config
from handlers.init import *
from aiogram.types import Message, Sticker


async def delete_last_messages(msg: Message, count: int = 3):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∫–æ–º–∞–Ω–¥—ã."""
    for i in range(0, count):
        try:
            await bot.delete_message(chat_id=msg.from_user.id, message_id=msg.message_id - i)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass


async def start_cmd_handler(msg: Message, state):
    await state.finish()

    answer = """üí∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏–π *valcon*.

üìà –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ 100 USD
‚Ä¢ 2500 RUB
‚Ä¢ 50 EUR

üî¢ –ß—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —á–∏—Å–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ 2 + 2
‚Ä¢ (30 * 2) - (20 * 5)

üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:
‚Ä¢ USD - –î–æ–ª–ª–∞—Ä –°–®–ê
‚Ä¢ RUB - –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å
‚Ä¢ UAH - –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞
‚Ä¢ EUR - –ï–≤—Ä–æ
‚Ä¢ TON - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ TON
‚Ä¢ USDT - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ USDT

üìù –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.

‚ÑπÔ∏è –ë–æ–ª–µ–µ —Ç–æ–≥–æ, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —á–∞—Ç —Å–æ –º–Ω–æ–π. –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ –º–æ–π –Ω–∏–∫–Ω–µ–π–º @YourCurrencyBot –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏ —É–∫–∞–∂–∏ —Å—É–º–º—É –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ:
‚Ä¢ @val_con_bot 100 USD
‚Ä¢ @val_con_bot 50 –±–∏—Ç–∫–æ–∏–Ω–æ–≤
‚Ä¢ @val_con_bot 2 + 2"""

    await msg.answer_sticker(sticker='CAACAgIAAxkBAAMKZCqF8NxyEdlQYjNX0uQ-kMCKBRsAAvINAAK7fWBIH8H7_ft7nyovBA')
    await msg.answer(text=answer, parse_mode='html')


async def converter_msg_handler(msg: Message):
    currency_regex = r'(\d+(?:\.\d+)?(?:–∫|k|—Ç—ã—Å)?)(?:\s*([^\d\s]+))?'

    matches = re.findall(currency_regex, msg.text.lower())

    try:
        answer = calculator(msg.text)
        await msg.answer(text=answer)
    except ValueError:
        for match in matches:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞–ª—é—Ç—ã. –ü–æ–ª—É—á–∞—é —Å—É–º–º—É –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã.
            amount = match[0].replace(',', '.')

            # –£–º–Ω–æ–∂–∞—é –Ω–∞ –∫/k
            if 'k' in amount or '–∫' in amount:
                amount = float(amount.replace('k', '000').replace('–∫', '000'))
            else:
                amount = float(amount)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—é –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∫ –Ω—É–∂–Ω–æ–º—É –≤–∏–¥—É ($=USD, —Ä—É–±–ª—å=RUB)
            currency = match[1]
            currency_code = ''

            for _currency in config.CURRENCIES:
                if currency in config.CURRENCIES[_currency]:
                    currency_code = _currency

            if not currency_code:
                currency_code = 'RUB'

            if currency_code in config.CRYPTOCURRENCIES:
                crypto = cryptopay.Crypto(config.CRYPTOPAY_API_KEY, testnet=False)
                exchange_rates = crypto.getExchangeRates()['result']
                currency_rates = {}

                for rate in exchange_rates:
                    if rate['source'] == currency_code and rate['target'] in config.CURRENCIES.keys():
                        currency_rates[rate['target']] = round(float(rate['rate']) * amount, 2)
                answer = f"{config.CRYPTOCURRENCIES_FLAGS[currency_code]} {amount} {currency_code}\n\n"

                for _currency in config.CURRENCIES_FLAGS.keys():
                    answer += f"{config.CURRENCIES_FLAGS[_currency]} {add_spaces(currency_rates[_currency])} {_currency}\n"

            else:
                currencies = list(config.CURRENCIES.keys())[:4]
                raw_converted = convert(base=currency_code, amount=amount,
                                        to=currencies)

                converted = {}
                for currency in raw_converted:
                    converted[currency] = round(raw_converted[currency], 2)

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–≥–ª–∞–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –ø–µ—Ä–≤–∞—è, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø–æ—Ç–æ–º)
                answer = f"{config.CURRENCIES_FLAGS[currency_code]} {add_spaces(converted[currency_code])} {currency_code}\n\n"
                currencies = [i for i in config.CURRENCIES][:4]
                currencies.remove(currency_code)
                for _currency in currencies:
                    answer += f"{config.CURRENCIES_FLAGS[_currency]} {add_spaces(converted[_currency])} {_currency}\n"
            answer = '*' + answer + '*'
            await msg.answer(text=answer, parse_mode='markdown')


async def get_sticker_id_handler(msg: Message):
    await msg.answer_sticker(sticker=msg.sticker.file_id)
    print(msg.sticker.file_id)
